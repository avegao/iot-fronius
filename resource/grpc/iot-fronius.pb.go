// Code generated by protoc-gen-go. DO NOT EDIT.
// source: iot-fronius.proto

package iot_fronius

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SuccessResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SuccessResponse) Reset()         { *m = SuccessResponse{} }
func (m *SuccessResponse) String() string { return proto.CompactTextString(m) }
func (*SuccessResponse) ProtoMessage()    {}
func (*SuccessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_fronius_cd086c6b52c626da, []int{0}
}
func (m *SuccessResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SuccessResponse.Unmarshal(m, b)
}
func (m *SuccessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SuccessResponse.Marshal(b, m, deterministic)
}
func (dst *SuccessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuccessResponse.Merge(dst, src)
}
func (m *SuccessResponse) XXX_Size() int {
	return xxx_messageInfo_SuccessResponse.Size(m)
}
func (m *SuccessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SuccessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SuccessResponse proto.InternalMessageInfo

func (m *SuccessResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type Powerflow struct {
	Site                 *SitePowerflow       `protobuf:"bytes,1,opt,name=site,proto3" json:"site,omitempty"`
	Inverter             []*InverterPowerflow `protobuf:"bytes,2,rep,name=inverter,proto3" json:"inverter,omitempty"`
	Ohmpilot             []*OhmpilotPowerflow `protobuf:"bytes,3,rep,name=ohmpilot,proto3" json:"ohmpilot,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Powerflow) Reset()         { *m = Powerflow{} }
func (m *Powerflow) String() string { return proto.CompactTextString(m) }
func (*Powerflow) ProtoMessage()    {}
func (*Powerflow) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_fronius_cd086c6b52c626da, []int{1}
}
func (m *Powerflow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Powerflow.Unmarshal(m, b)
}
func (m *Powerflow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Powerflow.Marshal(b, m, deterministic)
}
func (dst *Powerflow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Powerflow.Merge(dst, src)
}
func (m *Powerflow) XXX_Size() int {
	return xxx_messageInfo_Powerflow.Size(m)
}
func (m *Powerflow) XXX_DiscardUnknown() {
	xxx_messageInfo_Powerflow.DiscardUnknown(m)
}

var xxx_messageInfo_Powerflow proto.InternalMessageInfo

func (m *Powerflow) GetSite() *SitePowerflow {
	if m != nil {
		return m.Site
	}
	return nil
}

func (m *Powerflow) GetInverter() []*InverterPowerflow {
	if m != nil {
		return m.Inverter
	}
	return nil
}

func (m *Powerflow) GetOhmpilot() []*OhmpilotPowerflow {
	if m != nil {
		return m.Ohmpilot
	}
	return nil
}

type SitePowerflow struct {
	Mode                    string   `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	BatteryStandby          bool     `protobuf:"varint,2,opt,name=batteryStandby,proto3" json:"batteryStandby,omitempty"`
	BackupMode              bool     `protobuf:"varint,3,opt,name=backupMode,proto3" json:"backupMode,omitempty"`
	PowerFromGrid           float64  `protobuf:"fixed64,4,opt,name=powerFromGrid,proto3" json:"powerFromGrid,omitempty"`
	PowerLoad               float64  `protobuf:"fixed64,5,opt,name=powerLoad,proto3" json:"powerLoad,omitempty"`
	PowerAkku               float64  `protobuf:"fixed64,6,opt,name=powerAkku,proto3" json:"powerAkku,omitempty"`
	PowerFromPv             float64  `protobuf:"fixed64,7,opt,name=powerFromPv,proto3" json:"powerFromPv,omitempty"`
	RelativeSelfConsumption uint32   `protobuf:"varint,8,opt,name=relativeSelfConsumption,proto3" json:"relativeSelfConsumption,omitempty"`
	RelativeAutonomy        uint32   `protobuf:"varint,9,opt,name=relativeAutonomy,proto3" json:"relativeAutonomy,omitempty"`
	MeterLocation           string   `protobuf:"bytes,10,opt,name=meterLocation,proto3" json:"meterLocation,omitempty"`
	EnergyDay               float64  `protobuf:"fixed64,11,opt,name=energyDay,proto3" json:"energyDay,omitempty"`
	EnergyYear              float64  `protobuf:"fixed64,12,opt,name=energyYear,proto3" json:"energyYear,omitempty"`
	EnergyTotal             float64  `protobuf:"fixed64,13,opt,name=energyTotal,proto3" json:"energyTotal,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *SitePowerflow) Reset()         { *m = SitePowerflow{} }
func (m *SitePowerflow) String() string { return proto.CompactTextString(m) }
func (*SitePowerflow) ProtoMessage()    {}
func (*SitePowerflow) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_fronius_cd086c6b52c626da, []int{2}
}
func (m *SitePowerflow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SitePowerflow.Unmarshal(m, b)
}
func (m *SitePowerflow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SitePowerflow.Marshal(b, m, deterministic)
}
func (dst *SitePowerflow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SitePowerflow.Merge(dst, src)
}
func (m *SitePowerflow) XXX_Size() int {
	return xxx_messageInfo_SitePowerflow.Size(m)
}
func (m *SitePowerflow) XXX_DiscardUnknown() {
	xxx_messageInfo_SitePowerflow.DiscardUnknown(m)
}

var xxx_messageInfo_SitePowerflow proto.InternalMessageInfo

func (m *SitePowerflow) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *SitePowerflow) GetBatteryStandby() bool {
	if m != nil {
		return m.BatteryStandby
	}
	return false
}

func (m *SitePowerflow) GetBackupMode() bool {
	if m != nil {
		return m.BackupMode
	}
	return false
}

func (m *SitePowerflow) GetPowerFromGrid() float64 {
	if m != nil {
		return m.PowerFromGrid
	}
	return 0
}

func (m *SitePowerflow) GetPowerLoad() float64 {
	if m != nil {
		return m.PowerLoad
	}
	return 0
}

func (m *SitePowerflow) GetPowerAkku() float64 {
	if m != nil {
		return m.PowerAkku
	}
	return 0
}

func (m *SitePowerflow) GetPowerFromPv() float64 {
	if m != nil {
		return m.PowerFromPv
	}
	return 0
}

func (m *SitePowerflow) GetRelativeSelfConsumption() uint32 {
	if m != nil {
		return m.RelativeSelfConsumption
	}
	return 0
}

func (m *SitePowerflow) GetRelativeAutonomy() uint32 {
	if m != nil {
		return m.RelativeAutonomy
	}
	return 0
}

func (m *SitePowerflow) GetMeterLocation() string {
	if m != nil {
		return m.MeterLocation
	}
	return ""
}

func (m *SitePowerflow) GetEnergyDay() float64 {
	if m != nil {
		return m.EnergyDay
	}
	return 0
}

func (m *SitePowerflow) GetEnergyYear() float64 {
	if m != nil {
		return m.EnergyYear
	}
	return 0
}

func (m *SitePowerflow) GetEnergyTotal() float64 {
	if m != nil {
		return m.EnergyTotal
	}
	return 0
}

type InverterPowerflow struct {
	BatteryMode          string   `protobuf:"bytes,1,opt,name=batteryMode,proto3" json:"batteryMode,omitempty"`
	DeviceType           uint32   `protobuf:"varint,2,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	EnergyDay            float64  `protobuf:"fixed64,3,opt,name=energyDay,proto3" json:"energyDay,omitempty"`
	EnergyYear           float64  `protobuf:"fixed64,4,opt,name=energyYear,proto3" json:"energyYear,omitempty"`
	EnergyTotal          float64  `protobuf:"fixed64,5,opt,name=energyTotal,proto3" json:"energyTotal,omitempty"`
	CurrentPower         float64  `protobuf:"fixed64,6,opt,name=currentPower,proto3" json:"currentPower,omitempty"`
	Soc                  uint32   `protobuf:"varint,7,opt,name=soc,proto3" json:"soc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InverterPowerflow) Reset()         { *m = InverterPowerflow{} }
func (m *InverterPowerflow) String() string { return proto.CompactTextString(m) }
func (*InverterPowerflow) ProtoMessage()    {}
func (*InverterPowerflow) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_fronius_cd086c6b52c626da, []int{3}
}
func (m *InverterPowerflow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InverterPowerflow.Unmarshal(m, b)
}
func (m *InverterPowerflow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InverterPowerflow.Marshal(b, m, deterministic)
}
func (dst *InverterPowerflow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InverterPowerflow.Merge(dst, src)
}
func (m *InverterPowerflow) XXX_Size() int {
	return xxx_messageInfo_InverterPowerflow.Size(m)
}
func (m *InverterPowerflow) XXX_DiscardUnknown() {
	xxx_messageInfo_InverterPowerflow.DiscardUnknown(m)
}

var xxx_messageInfo_InverterPowerflow proto.InternalMessageInfo

func (m *InverterPowerflow) GetBatteryMode() string {
	if m != nil {
		return m.BatteryMode
	}
	return ""
}

func (m *InverterPowerflow) GetDeviceType() uint32 {
	if m != nil {
		return m.DeviceType
	}
	return 0
}

func (m *InverterPowerflow) GetEnergyDay() float64 {
	if m != nil {
		return m.EnergyDay
	}
	return 0
}

func (m *InverterPowerflow) GetEnergyYear() float64 {
	if m != nil {
		return m.EnergyYear
	}
	return 0
}

func (m *InverterPowerflow) GetEnergyTotal() float64 {
	if m != nil {
		return m.EnergyTotal
	}
	return 0
}

func (m *InverterPowerflow) GetCurrentPower() float64 {
	if m != nil {
		return m.CurrentPower
	}
	return 0
}

func (m *InverterPowerflow) GetSoc() uint32 {
	if m != nil {
		return m.Soc
	}
	return 0
}

type OhmpilotPowerflow struct {
	PowerAcTotal         float64  `protobuf:"fixed64,1,opt,name=powerAcTotal,proto3" json:"powerAcTotal,omitempty"`
	State                string   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Temperature          float64  `protobuf:"fixed64,3,opt,name=temperature,proto3" json:"temperature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OhmpilotPowerflow) Reset()         { *m = OhmpilotPowerflow{} }
func (m *OhmpilotPowerflow) String() string { return proto.CompactTextString(m) }
func (*OhmpilotPowerflow) ProtoMessage()    {}
func (*OhmpilotPowerflow) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_fronius_cd086c6b52c626da, []int{4}
}
func (m *OhmpilotPowerflow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OhmpilotPowerflow.Unmarshal(m, b)
}
func (m *OhmpilotPowerflow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OhmpilotPowerflow.Marshal(b, m, deterministic)
}
func (dst *OhmpilotPowerflow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OhmpilotPowerflow.Merge(dst, src)
}
func (m *OhmpilotPowerflow) XXX_Size() int {
	return xxx_messageInfo_OhmpilotPowerflow.Size(m)
}
func (m *OhmpilotPowerflow) XXX_DiscardUnknown() {
	xxx_messageInfo_OhmpilotPowerflow.DiscardUnknown(m)
}

var xxx_messageInfo_OhmpilotPowerflow proto.InternalMessageInfo

func (m *OhmpilotPowerflow) GetPowerAcTotal() float64 {
	if m != nil {
		return m.PowerAcTotal
	}
	return 0
}

func (m *OhmpilotPowerflow) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *OhmpilotPowerflow) GetTemperature() float64 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

type CurrentDataMeter struct {
	CurrentAcPhase1                   float64       `protobuf:"fixed64,1,opt,name=currentAcPhase1,proto3" json:"currentAcPhase1,omitempty"`
	CurrentAcPhase2                   float64       `protobuf:"fixed64,2,opt,name=currentAcPhase2,proto3" json:"currentAcPhase2,omitempty"`
	CurrentAcPhase3                   float64       `protobuf:"fixed64,3,opt,name=currentAcPhase3,proto3" json:"currentAcPhase3,omitempty"`
	CurrentAcSum                      float64       `protobuf:"fixed64,4,opt,name=currentAcSum,proto3" json:"currentAcSum,omitempty"`
	MeterDetails                      *MeterDetails `protobuf:"bytes,5,opt,name=meterDetails,proto3" json:"meterDetails,omitempty"`
	Enable                            bool          `protobuf:"varint,6,opt,name=enable,proto3" json:"enable,omitempty"`
	EnergyReactiveVArAcPhase1Consumed uint32        `protobuf:"varint,7,opt,name=energyReactiveVArAcPhase1Consumed,proto3" json:"energyReactiveVArAcPhase1Consumed,omitempty"`
	EnergyReactiveVArAcPhase1Produced uint32        `protobuf:"varint,8,opt,name=energyReactiveVArAcPhase1Produced,proto3" json:"energyReactiveVArAcPhase1Produced,omitempty"`
	EnergyReactiveVArAcPhase2Consumed uint32        `protobuf:"varint,9,opt,name=energyReactiveVArAcPhase2Consumed,proto3" json:"energyReactiveVArAcPhase2Consumed,omitempty"`
	EnergyReactiveVArAcPhase2Produced uint32        `protobuf:"varint,10,opt,name=energyReactiveVArAcPhase2Produced,proto3" json:"energyReactiveVArAcPhase2Produced,omitempty"`
	EnergyReactiveVArAcPhase3Consumed uint32        `protobuf:"varint,11,opt,name=energyReactiveVArAcPhase3Consumed,proto3" json:"energyReactiveVArAcPhase3Consumed,omitempty"`
	EnergyReactiveVArAcPhase3Produced uint32        `protobuf:"varint,12,opt,name=energyReactiveVArAcPhase3Produced,proto3" json:"energyReactiveVArAcPhase3Produced,omitempty"`
	EnergyReactiveVArAcSumConsumed    uint32        `protobuf:"varint,13,opt,name=energyReactiveVArAcSumConsumed,proto3" json:"energyReactiveVArAcSumConsumed,omitempty"`
	EnergyReactiveVArAcSumProduced    uint32        `protobuf:"varint,14,opt,name=energyReactiveVArAcSumProduced,proto3" json:"energyReactiveVArAcSumProduced,omitempty"`
	EnergyRealWAcMinusAbsolute        uint32        `protobuf:"varint,15,opt,name=energyRealWAcMinusAbsolute,proto3" json:"energyRealWAcMinusAbsolute,omitempty"`
	EnergyRealWAcPhase1Consumed       uint32        `protobuf:"varint,16,opt,name=energyRealWAcPhase1Consumed,proto3" json:"energyRealWAcPhase1Consumed,omitempty"`
	EnergyRealWAcPhase1Produced       uint32        `protobuf:"varint,17,opt,name=energyRealWAcPhase1Produced,proto3" json:"energyRealWAcPhase1Produced,omitempty"`
	EnergyRealWAcPhase2Consumed       uint32        `protobuf:"varint,18,opt,name=energyRealWAcPhase2Consumed,proto3" json:"energyRealWAcPhase2Consumed,omitempty"`
	EnergyRealWAcPhase2Produced       uint32        `protobuf:"varint,19,opt,name=energyRealWAcPhase2Produced,proto3" json:"energyRealWAcPhase2Produced,omitempty"`
	EnergyRealWAcPhase3Consumed       uint32        `protobuf:"varint,20,opt,name=energyRealWAcPhase3Consumed,proto3" json:"energyRealWAcPhase3Consumed,omitempty"`
	EnergyRealWAcPhase3Produced       uint32        `protobuf:"varint,21,opt,name=energyRealWAcPhase3Produced,proto3" json:"energyRealWAcPhase3Produced,omitempty"`
	EnergyRealWAcPlusAbsolute         uint32        `protobuf:"varint,22,opt,name=energyRealWAcPlusAbsolute,proto3" json:"energyRealWAcPlusAbsolute,omitempty"`
	EnergyRealWAcSumConsumed          uint32        `protobuf:"varint,23,opt,name=energyRealWAcSumConsumed,proto3" json:"energyRealWAcSumConsumed,omitempty"`
	EnergyRealWAcSumProduced          uint32        `protobuf:"varint,24,opt,name=energyRealWAcSumProduced,proto3" json:"energyRealWAcSumProduced,omitempty"`
	FrequencyPhaseAverage             float64       `protobuf:"fixed64,25,opt,name=frequencyPhaseAverage,proto3" json:"frequencyPhaseAverage,omitempty"`
	MeterLocationCurrent              uint32        `protobuf:"varint,26,opt,name=meterLocationCurrent,proto3" json:"meterLocationCurrent,omitempty"`
	PowerApparentSPhase1              float64       `protobuf:"fixed64,27,opt,name=powerApparentSPhase1,proto3" json:"powerApparentSPhase1,omitempty"`
	PowerApparentSPhase2              float64       `protobuf:"fixed64,28,opt,name=powerApparentSPhase2,proto3" json:"powerApparentSPhase2,omitempty"`
	PowerApparentSPhase3              float64       `protobuf:"fixed64,29,opt,name=powerApparentSPhase3,proto3" json:"powerApparentSPhase3,omitempty"`
	PowerApparentSSum                 float64       `protobuf:"fixed64,30,opt,name=powerApparentSSum,proto3" json:"powerApparentSSum,omitempty"`
	PowerFactorPhase1                 float64       `protobuf:"fixed64,31,opt,name=powerFactorPhase1,proto3" json:"powerFactorPhase1,omitempty"`
	PowerFactorPhase2                 float64       `protobuf:"fixed64,32,opt,name=powerFactorPhase2,proto3" json:"powerFactorPhase2,omitempty"`
	PowerFactorPhase3                 float64       `protobuf:"fixed64,33,opt,name=powerFactorPhase3,proto3" json:"powerFactorPhase3,omitempty"`
	PowerFactorSum                    float64       `protobuf:"fixed64,34,opt,name=powerFactorSum,proto3" json:"powerFactorSum,omitempty"`
	PowerReactiveQPhase1              float64       `protobuf:"fixed64,35,opt,name=powerReactiveQPhase1,proto3" json:"powerReactiveQPhase1,omitempty"`
	PowerReactiveQPhase2              float64       `protobuf:"fixed64,36,opt,name=powerReactiveQPhase2,proto3" json:"powerReactiveQPhase2,omitempty"`
	PowerReactiveQPhase3              float64       `protobuf:"fixed64,37,opt,name=powerReactiveQPhase3,proto3" json:"powerReactiveQPhase3,omitempty"`
	PowerReactiveQSum                 float64       `protobuf:"fixed64,38,opt,name=powerReactiveQSum,proto3" json:"powerReactiveQSum,omitempty"`
	PowerRealPPhase1                  float64       `protobuf:"fixed64,39,opt,name=powerRealPPhase1,proto3" json:"powerRealPPhase1,omitempty"`
	PowerRealPPhase2                  float64       `protobuf:"fixed64,40,opt,name=powerRealPPhase2,proto3" json:"powerRealPPhase2,omitempty"`
	PowerRealPPhase3                  float64       `protobuf:"fixed64,41,opt,name=powerRealPPhase3,proto3" json:"powerRealPPhase3,omitempty"`
	PowerRealPSum                     float64       `protobuf:"fixed64,42,opt,name=powerRealPSum,proto3" json:"powerRealPSum,omitempty"`
	Timestamp                         int64         `protobuf:"varint,43,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Visible                           bool          `protobuf:"varint,44,opt,name=visible,proto3" json:"visible,omitempty"`
	VoltageAcPhase1                   float64       `protobuf:"fixed64,45,opt,name=voltageAcPhase1,proto3" json:"voltageAcPhase1,omitempty"`
	VoltageAcPhase2                   float64       `protobuf:"fixed64,46,opt,name=voltageAcPhase2,proto3" json:"voltageAcPhase2,omitempty"`
	VoltageAcPhase3                   float64       `protobuf:"fixed64,47,opt,name=voltageAcPhase3,proto3" json:"voltageAcPhase3,omitempty"`
	XXX_NoUnkeyedLiteral              struct{}      `json:"-"`
	XXX_unrecognized                  []byte        `json:"-"`
	XXX_sizecache                     int32         `json:"-"`
}

func (m *CurrentDataMeter) Reset()         { *m = CurrentDataMeter{} }
func (m *CurrentDataMeter) String() string { return proto.CompactTextString(m) }
func (*CurrentDataMeter) ProtoMessage()    {}
func (*CurrentDataMeter) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_fronius_cd086c6b52c626da, []int{5}
}
func (m *CurrentDataMeter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CurrentDataMeter.Unmarshal(m, b)
}
func (m *CurrentDataMeter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CurrentDataMeter.Marshal(b, m, deterministic)
}
func (dst *CurrentDataMeter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentDataMeter.Merge(dst, src)
}
func (m *CurrentDataMeter) XXX_Size() int {
	return xxx_messageInfo_CurrentDataMeter.Size(m)
}
func (m *CurrentDataMeter) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentDataMeter.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentDataMeter proto.InternalMessageInfo

func (m *CurrentDataMeter) GetCurrentAcPhase1() float64 {
	if m != nil {
		return m.CurrentAcPhase1
	}
	return 0
}

func (m *CurrentDataMeter) GetCurrentAcPhase2() float64 {
	if m != nil {
		return m.CurrentAcPhase2
	}
	return 0
}

func (m *CurrentDataMeter) GetCurrentAcPhase3() float64 {
	if m != nil {
		return m.CurrentAcPhase3
	}
	return 0
}

func (m *CurrentDataMeter) GetCurrentAcSum() float64 {
	if m != nil {
		return m.CurrentAcSum
	}
	return 0
}

func (m *CurrentDataMeter) GetMeterDetails() *MeterDetails {
	if m != nil {
		return m.MeterDetails
	}
	return nil
}

func (m *CurrentDataMeter) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *CurrentDataMeter) GetEnergyReactiveVArAcPhase1Consumed() uint32 {
	if m != nil {
		return m.EnergyReactiveVArAcPhase1Consumed
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyReactiveVArAcPhase1Produced() uint32 {
	if m != nil {
		return m.EnergyReactiveVArAcPhase1Produced
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyReactiveVArAcPhase2Consumed() uint32 {
	if m != nil {
		return m.EnergyReactiveVArAcPhase2Consumed
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyReactiveVArAcPhase2Produced() uint32 {
	if m != nil {
		return m.EnergyReactiveVArAcPhase2Produced
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyReactiveVArAcPhase3Consumed() uint32 {
	if m != nil {
		return m.EnergyReactiveVArAcPhase3Consumed
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyReactiveVArAcPhase3Produced() uint32 {
	if m != nil {
		return m.EnergyReactiveVArAcPhase3Produced
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyReactiveVArAcSumConsumed() uint32 {
	if m != nil {
		return m.EnergyReactiveVArAcSumConsumed
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyReactiveVArAcSumProduced() uint32 {
	if m != nil {
		return m.EnergyReactiveVArAcSumProduced
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyRealWAcMinusAbsolute() uint32 {
	if m != nil {
		return m.EnergyRealWAcMinusAbsolute
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyRealWAcPhase1Consumed() uint32 {
	if m != nil {
		return m.EnergyRealWAcPhase1Consumed
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyRealWAcPhase1Produced() uint32 {
	if m != nil {
		return m.EnergyRealWAcPhase1Produced
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyRealWAcPhase2Consumed() uint32 {
	if m != nil {
		return m.EnergyRealWAcPhase2Consumed
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyRealWAcPhase2Produced() uint32 {
	if m != nil {
		return m.EnergyRealWAcPhase2Produced
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyRealWAcPhase3Consumed() uint32 {
	if m != nil {
		return m.EnergyRealWAcPhase3Consumed
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyRealWAcPhase3Produced() uint32 {
	if m != nil {
		return m.EnergyRealWAcPhase3Produced
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyRealWAcPlusAbsolute() uint32 {
	if m != nil {
		return m.EnergyRealWAcPlusAbsolute
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyRealWAcSumConsumed() uint32 {
	if m != nil {
		return m.EnergyRealWAcSumConsumed
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyRealWAcSumProduced() uint32 {
	if m != nil {
		return m.EnergyRealWAcSumProduced
	}
	return 0
}

func (m *CurrentDataMeter) GetFrequencyPhaseAverage() float64 {
	if m != nil {
		return m.FrequencyPhaseAverage
	}
	return 0
}

func (m *CurrentDataMeter) GetMeterLocationCurrent() uint32 {
	if m != nil {
		return m.MeterLocationCurrent
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerApparentSPhase1() float64 {
	if m != nil {
		return m.PowerApparentSPhase1
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerApparentSPhase2() float64 {
	if m != nil {
		return m.PowerApparentSPhase2
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerApparentSPhase3() float64 {
	if m != nil {
		return m.PowerApparentSPhase3
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerApparentSSum() float64 {
	if m != nil {
		return m.PowerApparentSSum
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerFactorPhase1() float64 {
	if m != nil {
		return m.PowerFactorPhase1
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerFactorPhase2() float64 {
	if m != nil {
		return m.PowerFactorPhase2
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerFactorPhase3() float64 {
	if m != nil {
		return m.PowerFactorPhase3
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerFactorSum() float64 {
	if m != nil {
		return m.PowerFactorSum
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerReactiveQPhase1() float64 {
	if m != nil {
		return m.PowerReactiveQPhase1
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerReactiveQPhase2() float64 {
	if m != nil {
		return m.PowerReactiveQPhase2
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerReactiveQPhase3() float64 {
	if m != nil {
		return m.PowerReactiveQPhase3
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerReactiveQSum() float64 {
	if m != nil {
		return m.PowerReactiveQSum
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerRealPPhase1() float64 {
	if m != nil {
		return m.PowerRealPPhase1
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerRealPPhase2() float64 {
	if m != nil {
		return m.PowerRealPPhase2
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerRealPPhase3() float64 {
	if m != nil {
		return m.PowerRealPPhase3
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerRealPSum() float64 {
	if m != nil {
		return m.PowerRealPSum
	}
	return 0
}

func (m *CurrentDataMeter) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *CurrentDataMeter) GetVisible() bool {
	if m != nil {
		return m.Visible
	}
	return false
}

func (m *CurrentDataMeter) GetVoltageAcPhase1() float64 {
	if m != nil {
		return m.VoltageAcPhase1
	}
	return 0
}

func (m *CurrentDataMeter) GetVoltageAcPhase2() float64 {
	if m != nil {
		return m.VoltageAcPhase2
	}
	return 0
}

func (m *CurrentDataMeter) GetVoltageAcPhase3() float64 {
	if m != nil {
		return m.VoltageAcPhase3
	}
	return 0
}

type MeterDetails struct {
	Manufacturer         string   `protobuf:"bytes,1,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Model                string   `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	Serial               string   `protobuf:"bytes,3,opt,name=serial,proto3" json:"serial,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeterDetails) Reset()         { *m = MeterDetails{} }
func (m *MeterDetails) String() string { return proto.CompactTextString(m) }
func (*MeterDetails) ProtoMessage()    {}
func (*MeterDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_fronius_cd086c6b52c626da, []int{6}
}
func (m *MeterDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeterDetails.Unmarshal(m, b)
}
func (m *MeterDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeterDetails.Marshal(b, m, deterministic)
}
func (dst *MeterDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterDetails.Merge(dst, src)
}
func (m *MeterDetails) XXX_Size() int {
	return xxx_messageInfo_MeterDetails.Size(m)
}
func (m *MeterDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterDetails.DiscardUnknown(m)
}

var xxx_messageInfo_MeterDetails proto.InternalMessageInfo

func (m *MeterDetails) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *MeterDetails) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *MeterDetails) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

type CurrenDataMeterRequest struct {
	Elements             []*CurrentDataMeter `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CurrenDataMeterRequest) Reset()         { *m = CurrenDataMeterRequest{} }
func (m *CurrenDataMeterRequest) String() string { return proto.CompactTextString(m) }
func (*CurrenDataMeterRequest) ProtoMessage()    {}
func (*CurrenDataMeterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_fronius_cd086c6b52c626da, []int{7}
}
func (m *CurrenDataMeterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CurrenDataMeterRequest.Unmarshal(m, b)
}
func (m *CurrenDataMeterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CurrenDataMeterRequest.Marshal(b, m, deterministic)
}
func (dst *CurrenDataMeterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrenDataMeterRequest.Merge(dst, src)
}
func (m *CurrenDataMeterRequest) XXX_Size() int {
	return xxx_messageInfo_CurrenDataMeterRequest.Size(m)
}
func (m *CurrenDataMeterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrenDataMeterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CurrenDataMeterRequest proto.InternalMessageInfo

func (m *CurrenDataMeterRequest) GetElements() []*CurrentDataMeter {
	if m != nil {
		return m.Elements
	}
	return nil
}

type CurrenDataInverterRequest struct {
	DayEnergy            []int32  `protobuf:"varint,1,rep,packed,name=dayEnergy,proto3" json:"dayEnergy,omitempty"`
	Pac                  []int32  `protobuf:"varint,2,rep,packed,name=pac,proto3" json:"pac,omitempty"`
	TotalEnergy          []int32  `protobuf:"varint,3,rep,packed,name=totalEnergy,proto3" json:"totalEnergy,omitempty"`
	YearEnergy           []int32  `protobuf:"varint,4,rep,packed,name=yearEnergy,proto3" json:"yearEnergy,omitempty"`
	Timestamp            int64    `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CurrenDataInverterRequest) Reset()         { *m = CurrenDataInverterRequest{} }
func (m *CurrenDataInverterRequest) String() string { return proto.CompactTextString(m) }
func (*CurrenDataInverterRequest) ProtoMessage()    {}
func (*CurrenDataInverterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_fronius_cd086c6b52c626da, []int{8}
}
func (m *CurrenDataInverterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CurrenDataInverterRequest.Unmarshal(m, b)
}
func (m *CurrenDataInverterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CurrenDataInverterRequest.Marshal(b, m, deterministic)
}
func (dst *CurrenDataInverterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrenDataInverterRequest.Merge(dst, src)
}
func (m *CurrenDataInverterRequest) XXX_Size() int {
	return xxx_messageInfo_CurrenDataInverterRequest.Size(m)
}
func (m *CurrenDataInverterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrenDataInverterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CurrenDataInverterRequest proto.InternalMessageInfo

func (m *CurrenDataInverterRequest) GetDayEnergy() []int32 {
	if m != nil {
		return m.DayEnergy
	}
	return nil
}

func (m *CurrenDataInverterRequest) GetPac() []int32 {
	if m != nil {
		return m.Pac
	}
	return nil
}

func (m *CurrenDataInverterRequest) GetTotalEnergy() []int32 {
	if m != nil {
		return m.TotalEnergy
	}
	return nil
}

func (m *CurrenDataInverterRequest) GetYearEnergy() []int32 {
	if m != nil {
		return m.YearEnergy
	}
	return nil
}

func (m *CurrenDataInverterRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type CurrentIoState struct {
	Pins                 []*IoStatePin `protobuf:"bytes,1,rep,name=pins,proto3" json:"pins,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CurrentIoState) Reset()         { *m = CurrentIoState{} }
func (m *CurrentIoState) String() string { return proto.CompactTextString(m) }
func (*CurrentIoState) ProtoMessage()    {}
func (*CurrentIoState) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_fronius_cd086c6b52c626da, []int{9}
}
func (m *CurrentIoState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CurrentIoState.Unmarshal(m, b)
}
func (m *CurrentIoState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CurrentIoState.Marshal(b, m, deterministic)
}
func (dst *CurrentIoState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentIoState.Merge(dst, src)
}
func (m *CurrentIoState) XXX_Size() int {
	return xxx_messageInfo_CurrentIoState.Size(m)
}
func (m *CurrentIoState) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentIoState.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentIoState proto.InternalMessageInfo

func (m *CurrentIoState) GetPins() []*IoStatePin {
	if m != nil {
		return m.Pins
	}
	return nil
}

type IoStatePin struct {
	PinNumber            int32    `protobuf:"varint,1,opt,name=pinNumber,proto3" json:"pinNumber,omitempty"`
	Function             string   `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
	Type                 string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Direction            string   `protobuf:"bytes,4,opt,name=direction,proto3" json:"direction,omitempty"`
	Set                  bool     `protobuf:"varint,5,opt,name=set,proto3" json:"set,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IoStatePin) Reset()         { *m = IoStatePin{} }
func (m *IoStatePin) String() string { return proto.CompactTextString(m) }
func (*IoStatePin) ProtoMessage()    {}
func (*IoStatePin) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_fronius_cd086c6b52c626da, []int{10}
}
func (m *IoStatePin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IoStatePin.Unmarshal(m, b)
}
func (m *IoStatePin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IoStatePin.Marshal(b, m, deterministic)
}
func (dst *IoStatePin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IoStatePin.Merge(dst, src)
}
func (m *IoStatePin) XXX_Size() int {
	return xxx_messageInfo_IoStatePin.Size(m)
}
func (m *IoStatePin) XXX_DiscardUnknown() {
	xxx_messageInfo_IoStatePin.DiscardUnknown(m)
}

var xxx_messageInfo_IoStatePin proto.InternalMessageInfo

func (m *IoStatePin) GetPinNumber() int32 {
	if m != nil {
		return m.PinNumber
	}
	return 0
}

func (m *IoStatePin) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *IoStatePin) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *IoStatePin) GetDirection() string {
	if m != nil {
		return m.Direction
	}
	return ""
}

func (m *IoStatePin) GetSet() bool {
	if m != nil {
		return m.Set
	}
	return false
}

type FindByDateParameters struct {
	StartDate            int64    `protobuf:"varint,1,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate              int64    `protobuf:"varint,2,opt,name=endDate,proto3" json:"endDate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindByDateParameters) Reset()         { *m = FindByDateParameters{} }
func (m *FindByDateParameters) String() string { return proto.CompactTextString(m) }
func (*FindByDateParameters) ProtoMessage()    {}
func (*FindByDateParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_fronius_cd086c6b52c626da, []int{11}
}
func (m *FindByDateParameters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindByDateParameters.Unmarshal(m, b)
}
func (m *FindByDateParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindByDateParameters.Marshal(b, m, deterministic)
}
func (dst *FindByDateParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindByDateParameters.Merge(dst, src)
}
func (m *FindByDateParameters) XXX_Size() int {
	return xxx_messageInfo_FindByDateParameters.Size(m)
}
func (m *FindByDateParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_FindByDateParameters.DiscardUnknown(m)
}

var xxx_messageInfo_FindByDateParameters proto.InternalMessageInfo

func (m *FindByDateParameters) GetStartDate() int64 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *FindByDateParameters) GetEndDate() int64 {
	if m != nil {
		return m.EndDate
	}
	return 0
}

type GetDataMeterResponseArray struct {
	Data                 []*GetDataMeterResponse `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetDataMeterResponseArray) Reset()         { *m = GetDataMeterResponseArray{} }
func (m *GetDataMeterResponseArray) String() string { return proto.CompactTextString(m) }
func (*GetDataMeterResponseArray) ProtoMessage()    {}
func (*GetDataMeterResponseArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_fronius_cd086c6b52c626da, []int{12}
}
func (m *GetDataMeterResponseArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDataMeterResponseArray.Unmarshal(m, b)
}
func (m *GetDataMeterResponseArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDataMeterResponseArray.Marshal(b, m, deterministic)
}
func (dst *GetDataMeterResponseArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDataMeterResponseArray.Merge(dst, src)
}
func (m *GetDataMeterResponseArray) XXX_Size() int {
	return xxx_messageInfo_GetDataMeterResponseArray.Size(m)
}
func (m *GetDataMeterResponseArray) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDataMeterResponseArray.DiscardUnknown(m)
}

var xxx_messageInfo_GetDataMeterResponseArray proto.InternalMessageInfo

func (m *GetDataMeterResponseArray) GetData() []*GetDataMeterResponse {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetDataMeterResponse struct {
	Id                                uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CurrentAcPhase1                   float64  `protobuf:"fixed64,2,opt,name=currentAcPhase1,proto3" json:"currentAcPhase1,omitempty"`
	CurrentAcPhase2                   float64  `protobuf:"fixed64,3,opt,name=currentAcPhase2,proto3" json:"currentAcPhase2,omitempty"`
	CurrentAcPhase3                   float64  `protobuf:"fixed64,4,opt,name=currentAcPhase3,proto3" json:"currentAcPhase3,omitempty"`
	CurrentAcSum                      float64  `protobuf:"fixed64,5,opt,name=currentAcSum,proto3" json:"currentAcSum,omitempty"`
	EnergyReactiveVArAcPhase1Consumed uint32   `protobuf:"varint,6,opt,name=energyReactiveVArAcPhase1Consumed,proto3" json:"energyReactiveVArAcPhase1Consumed,omitempty"`
	EnergyReactiveVArAcPhase1Produced uint32   `protobuf:"varint,7,opt,name=energyReactiveVArAcPhase1Produced,proto3" json:"energyReactiveVArAcPhase1Produced,omitempty"`
	EnergyReactiveVArAcPhase2Consumed uint32   `protobuf:"varint,8,opt,name=energyReactiveVArAcPhase2Consumed,proto3" json:"energyReactiveVArAcPhase2Consumed,omitempty"`
	EnergyReactiveVArAcPhase2Produced uint32   `protobuf:"varint,9,opt,name=energyReactiveVArAcPhase2Produced,proto3" json:"energyReactiveVArAcPhase2Produced,omitempty"`
	EnergyReactiveVArAcPhase3Consumed uint32   `protobuf:"varint,10,opt,name=energyReactiveVArAcPhase3Consumed,proto3" json:"energyReactiveVArAcPhase3Consumed,omitempty"`
	EnergyReactiveVArAcPhase3Produced uint32   `protobuf:"varint,11,opt,name=energyReactiveVArAcPhase3Produced,proto3" json:"energyReactiveVArAcPhase3Produced,omitempty"`
	EnergyReactiveVArAcSumConsumed    uint32   `protobuf:"varint,12,opt,name=energyReactiveVArAcSumConsumed,proto3" json:"energyReactiveVArAcSumConsumed,omitempty"`
	EnergyReactiveVArAcSumProduced    uint32   `protobuf:"varint,13,opt,name=energyReactiveVArAcSumProduced,proto3" json:"energyReactiveVArAcSumProduced,omitempty"`
	EnergyRealWAcMinusAbsolute        uint32   `protobuf:"varint,14,opt,name=energyRealWAcMinusAbsolute,proto3" json:"energyRealWAcMinusAbsolute,omitempty"`
	EnergyRealWAcPhase1Consumed       uint32   `protobuf:"varint,15,opt,name=energyRealWAcPhase1Consumed,proto3" json:"energyRealWAcPhase1Consumed,omitempty"`
	EnergyRealWAcPhase1Produced       uint32   `protobuf:"varint,16,opt,name=energyRealWAcPhase1Produced,proto3" json:"energyRealWAcPhase1Produced,omitempty"`
	EnergyRealWAcPhase2Consumed       uint32   `protobuf:"varint,17,opt,name=energyRealWAcPhase2Consumed,proto3" json:"energyRealWAcPhase2Consumed,omitempty"`
	EnergyRealWAcPhase2Produced       uint32   `protobuf:"varint,18,opt,name=energyRealWAcPhase2Produced,proto3" json:"energyRealWAcPhase2Produced,omitempty"`
	EnergyRealWAcPhase3Consumed       uint32   `protobuf:"varint,19,opt,name=energyRealWAcPhase3Consumed,proto3" json:"energyRealWAcPhase3Consumed,omitempty"`
	EnergyRealWAcPhase3Produced       uint32   `protobuf:"varint,20,opt,name=energyRealWAcPhase3Produced,proto3" json:"energyRealWAcPhase3Produced,omitempty"`
	EnergyRealWAcPlusAbsolute         uint32   `protobuf:"varint,21,opt,name=energyRealWAcPlusAbsolute,proto3" json:"energyRealWAcPlusAbsolute,omitempty"`
	EnergyRealWAcSumConsumed          uint32   `protobuf:"varint,22,opt,name=energyRealWAcSumConsumed,proto3" json:"energyRealWAcSumConsumed,omitempty"`
	EnergyRealWAcSumProduced          uint32   `protobuf:"varint,23,opt,name=energyRealWAcSumProduced,proto3" json:"energyRealWAcSumProduced,omitempty"`
	FrequencyPhaseAverage             float64  `protobuf:"fixed64,24,opt,name=frequencyPhaseAverage,proto3" json:"frequencyPhaseAverage,omitempty"`
	PowerApparentSPhase1              float64  `protobuf:"fixed64,25,opt,name=powerApparentSPhase1,proto3" json:"powerApparentSPhase1,omitempty"`
	PowerApparentSPhase2              float64  `protobuf:"fixed64,26,opt,name=powerApparentSPhase2,proto3" json:"powerApparentSPhase2,omitempty"`
	PowerApparentSPhase3              float64  `protobuf:"fixed64,27,opt,name=powerApparentSPhase3,proto3" json:"powerApparentSPhase3,omitempty"`
	PowerApparentSSum                 float64  `protobuf:"fixed64,28,opt,name=powerApparentSSum,proto3" json:"powerApparentSSum,omitempty"`
	PowerFactorPhase1                 float64  `protobuf:"fixed64,29,opt,name=powerFactorPhase1,proto3" json:"powerFactorPhase1,omitempty"`
	PowerFactorPhase2                 float64  `protobuf:"fixed64,30,opt,name=powerFactorPhase2,proto3" json:"powerFactorPhase2,omitempty"`
	PowerFactorPhase3                 float64  `protobuf:"fixed64,31,opt,name=powerFactorPhase3,proto3" json:"powerFactorPhase3,omitempty"`
	PowerFactorSum                    float64  `protobuf:"fixed64,32,opt,name=powerFactorSum,proto3" json:"powerFactorSum,omitempty"`
	PowerReactiveQPhase1              float64  `protobuf:"fixed64,33,opt,name=powerReactiveQPhase1,proto3" json:"powerReactiveQPhase1,omitempty"`
	PowerReactiveQPhase2              float64  `protobuf:"fixed64,34,opt,name=powerReactiveQPhase2,proto3" json:"powerReactiveQPhase2,omitempty"`
	PowerReactiveQPhase3              float64  `protobuf:"fixed64,35,opt,name=powerReactiveQPhase3,proto3" json:"powerReactiveQPhase3,omitempty"`
	PowerReactiveQSum                 float64  `protobuf:"fixed64,36,opt,name=powerReactiveQSum,proto3" json:"powerReactiveQSum,omitempty"`
	PowerRealPPhase1                  float64  `protobuf:"fixed64,37,opt,name=powerRealPPhase1,proto3" json:"powerRealPPhase1,omitempty"`
	PowerRealPPhase2                  float64  `protobuf:"fixed64,38,opt,name=powerRealPPhase2,proto3" json:"powerRealPPhase2,omitempty"`
	PowerRealPPhase3                  float64  `protobuf:"fixed64,39,opt,name=powerRealPPhase3,proto3" json:"powerRealPPhase3,omitempty"`
	PowerRealPSum                     float64  `protobuf:"fixed64,40,opt,name=powerRealPSum,proto3" json:"powerRealPSum,omitempty"`
	Timestamp                         int64    `protobuf:"varint,41,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	VoltageAcPhase1                   float64  `protobuf:"fixed64,42,opt,name=voltageAcPhase1,proto3" json:"voltageAcPhase1,omitempty"`
	VoltageAcPhase2                   float64  `protobuf:"fixed64,43,opt,name=voltageAcPhase2,proto3" json:"voltageAcPhase2,omitempty"`
	VoltageAcPhase3                   float64  `protobuf:"fixed64,44,opt,name=voltageAcPhase3,proto3" json:"voltageAcPhase3,omitempty"`
	XXX_NoUnkeyedLiteral              struct{} `json:"-"`
	XXX_unrecognized                  []byte   `json:"-"`
	XXX_sizecache                     int32    `json:"-"`
}

func (m *GetDataMeterResponse) Reset()         { *m = GetDataMeterResponse{} }
func (m *GetDataMeterResponse) String() string { return proto.CompactTextString(m) }
func (*GetDataMeterResponse) ProtoMessage()    {}
func (*GetDataMeterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_fronius_cd086c6b52c626da, []int{13}
}
func (m *GetDataMeterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDataMeterResponse.Unmarshal(m, b)
}
func (m *GetDataMeterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDataMeterResponse.Marshal(b, m, deterministic)
}
func (dst *GetDataMeterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDataMeterResponse.Merge(dst, src)
}
func (m *GetDataMeterResponse) XXX_Size() int {
	return xxx_messageInfo_GetDataMeterResponse.Size(m)
}
func (m *GetDataMeterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDataMeterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDataMeterResponse proto.InternalMessageInfo

func (m *GetDataMeterResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetDataMeterResponse) GetCurrentAcPhase1() float64 {
	if m != nil {
		return m.CurrentAcPhase1
	}
	return 0
}

func (m *GetDataMeterResponse) GetCurrentAcPhase2() float64 {
	if m != nil {
		return m.CurrentAcPhase2
	}
	return 0
}

func (m *GetDataMeterResponse) GetCurrentAcPhase3() float64 {
	if m != nil {
		return m.CurrentAcPhase3
	}
	return 0
}

func (m *GetDataMeterResponse) GetCurrentAcSum() float64 {
	if m != nil {
		return m.CurrentAcSum
	}
	return 0
}

func (m *GetDataMeterResponse) GetEnergyReactiveVArAcPhase1Consumed() uint32 {
	if m != nil {
		return m.EnergyReactiveVArAcPhase1Consumed
	}
	return 0
}

func (m *GetDataMeterResponse) GetEnergyReactiveVArAcPhase1Produced() uint32 {
	if m != nil {
		return m.EnergyReactiveVArAcPhase1Produced
	}
	return 0
}

func (m *GetDataMeterResponse) GetEnergyReactiveVArAcPhase2Consumed() uint32 {
	if m != nil {
		return m.EnergyReactiveVArAcPhase2Consumed
	}
	return 0
}

func (m *GetDataMeterResponse) GetEnergyReactiveVArAcPhase2Produced() uint32 {
	if m != nil {
		return m.EnergyReactiveVArAcPhase2Produced
	}
	return 0
}

func (m *GetDataMeterResponse) GetEnergyReactiveVArAcPhase3Consumed() uint32 {
	if m != nil {
		return m.EnergyReactiveVArAcPhase3Consumed
	}
	return 0
}

func (m *GetDataMeterResponse) GetEnergyReactiveVArAcPhase3Produced() uint32 {
	if m != nil {
		return m.EnergyReactiveVArAcPhase3Produced
	}
	return 0
}

func (m *GetDataMeterResponse) GetEnergyReactiveVArAcSumConsumed() uint32 {
	if m != nil {
		return m.EnergyReactiveVArAcSumConsumed
	}
	return 0
}

func (m *GetDataMeterResponse) GetEnergyReactiveVArAcSumProduced() uint32 {
	if m != nil {
		return m.EnergyReactiveVArAcSumProduced
	}
	return 0
}

func (m *GetDataMeterResponse) GetEnergyRealWAcMinusAbsolute() uint32 {
	if m != nil {
		return m.EnergyRealWAcMinusAbsolute
	}
	return 0
}

func (m *GetDataMeterResponse) GetEnergyRealWAcPhase1Consumed() uint32 {
	if m != nil {
		return m.EnergyRealWAcPhase1Consumed
	}
	return 0
}

func (m *GetDataMeterResponse) GetEnergyRealWAcPhase1Produced() uint32 {
	if m != nil {
		return m.EnergyRealWAcPhase1Produced
	}
	return 0
}

func (m *GetDataMeterResponse) GetEnergyRealWAcPhase2Consumed() uint32 {
	if m != nil {
		return m.EnergyRealWAcPhase2Consumed
	}
	return 0
}

func (m *GetDataMeterResponse) GetEnergyRealWAcPhase2Produced() uint32 {
	if m != nil {
		return m.EnergyRealWAcPhase2Produced
	}
	return 0
}

func (m *GetDataMeterResponse) GetEnergyRealWAcPhase3Consumed() uint32 {
	if m != nil {
		return m.EnergyRealWAcPhase3Consumed
	}
	return 0
}

func (m *GetDataMeterResponse) GetEnergyRealWAcPhase3Produced() uint32 {
	if m != nil {
		return m.EnergyRealWAcPhase3Produced
	}
	return 0
}

func (m *GetDataMeterResponse) GetEnergyRealWAcPlusAbsolute() uint32 {
	if m != nil {
		return m.EnergyRealWAcPlusAbsolute
	}
	return 0
}

func (m *GetDataMeterResponse) GetEnergyRealWAcSumConsumed() uint32 {
	if m != nil {
		return m.EnergyRealWAcSumConsumed
	}
	return 0
}

func (m *GetDataMeterResponse) GetEnergyRealWAcSumProduced() uint32 {
	if m != nil {
		return m.EnergyRealWAcSumProduced
	}
	return 0
}

func (m *GetDataMeterResponse) GetFrequencyPhaseAverage() float64 {
	if m != nil {
		return m.FrequencyPhaseAverage
	}
	return 0
}

func (m *GetDataMeterResponse) GetPowerApparentSPhase1() float64 {
	if m != nil {
		return m.PowerApparentSPhase1
	}
	return 0
}

func (m *GetDataMeterResponse) GetPowerApparentSPhase2() float64 {
	if m != nil {
		return m.PowerApparentSPhase2
	}
	return 0
}

func (m *GetDataMeterResponse) GetPowerApparentSPhase3() float64 {
	if m != nil {
		return m.PowerApparentSPhase3
	}
	return 0
}

func (m *GetDataMeterResponse) GetPowerApparentSSum() float64 {
	if m != nil {
		return m.PowerApparentSSum
	}
	return 0
}

func (m *GetDataMeterResponse) GetPowerFactorPhase1() float64 {
	if m != nil {
		return m.PowerFactorPhase1
	}
	return 0
}

func (m *GetDataMeterResponse) GetPowerFactorPhase2() float64 {
	if m != nil {
		return m.PowerFactorPhase2
	}
	return 0
}

func (m *GetDataMeterResponse) GetPowerFactorPhase3() float64 {
	if m != nil {
		return m.PowerFactorPhase3
	}
	return 0
}

func (m *GetDataMeterResponse) GetPowerFactorSum() float64 {
	if m != nil {
		return m.PowerFactorSum
	}
	return 0
}

func (m *GetDataMeterResponse) GetPowerReactiveQPhase1() float64 {
	if m != nil {
		return m.PowerReactiveQPhase1
	}
	return 0
}

func (m *GetDataMeterResponse) GetPowerReactiveQPhase2() float64 {
	if m != nil {
		return m.PowerReactiveQPhase2
	}
	return 0
}

func (m *GetDataMeterResponse) GetPowerReactiveQPhase3() float64 {
	if m != nil {
		return m.PowerReactiveQPhase3
	}
	return 0
}

func (m *GetDataMeterResponse) GetPowerReactiveQSum() float64 {
	if m != nil {
		return m.PowerReactiveQSum
	}
	return 0
}

func (m *GetDataMeterResponse) GetPowerRealPPhase1() float64 {
	if m != nil {
		return m.PowerRealPPhase1
	}
	return 0
}

func (m *GetDataMeterResponse) GetPowerRealPPhase2() float64 {
	if m != nil {
		return m.PowerRealPPhase2
	}
	return 0
}

func (m *GetDataMeterResponse) GetPowerRealPPhase3() float64 {
	if m != nil {
		return m.PowerRealPPhase3
	}
	return 0
}

func (m *GetDataMeterResponse) GetPowerRealPSum() float64 {
	if m != nil {
		return m.PowerRealPSum
	}
	return 0
}

func (m *GetDataMeterResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *GetDataMeterResponse) GetVoltageAcPhase1() float64 {
	if m != nil {
		return m.VoltageAcPhase1
	}
	return 0
}

func (m *GetDataMeterResponse) GetVoltageAcPhase2() float64 {
	if m != nil {
		return m.VoltageAcPhase2
	}
	return 0
}

func (m *GetDataMeterResponse) GetVoltageAcPhase3() float64 {
	if m != nil {
		return m.VoltageAcPhase3
	}
	return 0
}

func init() {
	proto.RegisterType((*SuccessResponse)(nil), "iot_fronius.SuccessResponse")
	proto.RegisterType((*Powerflow)(nil), "iot_fronius.Powerflow")
	proto.RegisterType((*SitePowerflow)(nil), "iot_fronius.SitePowerflow")
	proto.RegisterType((*InverterPowerflow)(nil), "iot_fronius.InverterPowerflow")
	proto.RegisterType((*OhmpilotPowerflow)(nil), "iot_fronius.OhmpilotPowerflow")
	proto.RegisterType((*CurrentDataMeter)(nil), "iot_fronius.CurrentDataMeter")
	proto.RegisterType((*MeterDetails)(nil), "iot_fronius.MeterDetails")
	proto.RegisterType((*CurrenDataMeterRequest)(nil), "iot_fronius.CurrenDataMeterRequest")
	proto.RegisterType((*CurrenDataInverterRequest)(nil), "iot_fronius.CurrenDataInverterRequest")
	proto.RegisterType((*CurrentIoState)(nil), "iot_fronius.CurrentIoState")
	proto.RegisterType((*IoStatePin)(nil), "iot_fronius.IoStatePin")
	proto.RegisterType((*FindByDateParameters)(nil), "iot_fronius.FindByDateParameters")
	proto.RegisterType((*GetDataMeterResponseArray)(nil), "iot_fronius.GetDataMeterResponseArray")
	proto.RegisterType((*GetDataMeterResponse)(nil), "iot_fronius.GetDataMeterResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FroniusClient is the client API for Fronius service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FroniusClient interface {
	InsertCurrentDataPowerflow(ctx context.Context, in *Powerflow, opts ...grpc.CallOption) (*SuccessResponse, error)
	InsertCurrentDataMeter(ctx context.Context, in *CurrenDataMeterRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	InsertCurrentDataInverter(ctx context.Context, in *CurrenDataInverterRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	InsertCurrentIoState(ctx context.Context, in *CurrentIoState, opts ...grpc.CallOption) (*SuccessResponse, error)
	FindDataMeterByDate(ctx context.Context, in *FindByDateParameters, opts ...grpc.CallOption) (*GetDataMeterResponseArray, error)
}

type froniusClient struct {
	cc *grpc.ClientConn
}

func NewFroniusClient(cc *grpc.ClientConn) FroniusClient {
	return &froniusClient{cc}
}

func (c *froniusClient) InsertCurrentDataPowerflow(ctx context.Context, in *Powerflow, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/iot_fronius.Fronius/InsertCurrentDataPowerflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *froniusClient) InsertCurrentDataMeter(ctx context.Context, in *CurrenDataMeterRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/iot_fronius.Fronius/InsertCurrentDataMeter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *froniusClient) InsertCurrentDataInverter(ctx context.Context, in *CurrenDataInverterRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/iot_fronius.Fronius/InsertCurrentDataInverter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *froniusClient) InsertCurrentIoState(ctx context.Context, in *CurrentIoState, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/iot_fronius.Fronius/InsertCurrentIoState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *froniusClient) FindDataMeterByDate(ctx context.Context, in *FindByDateParameters, opts ...grpc.CallOption) (*GetDataMeterResponseArray, error) {
	out := new(GetDataMeterResponseArray)
	err := c.cc.Invoke(ctx, "/iot_fronius.Fronius/FindDataMeterByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FroniusServer is the server API for Fronius service.
type FroniusServer interface {
	InsertCurrentDataPowerflow(context.Context, *Powerflow) (*SuccessResponse, error)
	InsertCurrentDataMeter(context.Context, *CurrenDataMeterRequest) (*SuccessResponse, error)
	InsertCurrentDataInverter(context.Context, *CurrenDataInverterRequest) (*SuccessResponse, error)
	InsertCurrentIoState(context.Context, *CurrentIoState) (*SuccessResponse, error)
	FindDataMeterByDate(context.Context, *FindByDateParameters) (*GetDataMeterResponseArray, error)
}

func RegisterFroniusServer(s *grpc.Server, srv FroniusServer) {
	s.RegisterService(&_Fronius_serviceDesc, srv)
}

func _Fronius_InsertCurrentDataPowerflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Powerflow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FroniusServer).InsertCurrentDataPowerflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_fronius.Fronius/InsertCurrentDataPowerflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FroniusServer).InsertCurrentDataPowerflow(ctx, req.(*Powerflow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fronius_InsertCurrentDataMeter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrenDataMeterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FroniusServer).InsertCurrentDataMeter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_fronius.Fronius/InsertCurrentDataMeter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FroniusServer).InsertCurrentDataMeter(ctx, req.(*CurrenDataMeterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fronius_InsertCurrentDataInverter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrenDataInverterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FroniusServer).InsertCurrentDataInverter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_fronius.Fronius/InsertCurrentDataInverter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FroniusServer).InsertCurrentDataInverter(ctx, req.(*CurrenDataInverterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fronius_InsertCurrentIoState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentIoState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FroniusServer).InsertCurrentIoState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_fronius.Fronius/InsertCurrentIoState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FroniusServer).InsertCurrentIoState(ctx, req.(*CurrentIoState))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fronius_FindDataMeterByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByDateParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FroniusServer).FindDataMeterByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_fronius.Fronius/FindDataMeterByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FroniusServer).FindDataMeterByDate(ctx, req.(*FindByDateParameters))
	}
	return interceptor(ctx, in, info, handler)
}

var _Fronius_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iot_fronius.Fronius",
	HandlerType: (*FroniusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertCurrentDataPowerflow",
			Handler:    _Fronius_InsertCurrentDataPowerflow_Handler,
		},
		{
			MethodName: "InsertCurrentDataMeter",
			Handler:    _Fronius_InsertCurrentDataMeter_Handler,
		},
		{
			MethodName: "InsertCurrentDataInverter",
			Handler:    _Fronius_InsertCurrentDataInverter_Handler,
		},
		{
			MethodName: "InsertCurrentIoState",
			Handler:    _Fronius_InsertCurrentIoState_Handler,
		},
		{
			MethodName: "FindDataMeterByDate",
			Handler:    _Fronius_FindDataMeterByDate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iot-fronius.proto",
}

func init() { proto.RegisterFile("iot-fronius.proto", fileDescriptor_iot_fronius_cd086c6b52c626da) }

var fileDescriptor_iot_fronius_cd086c6b52c626da = []byte{
	// 1720 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0xdd, 0x72, 0x1a, 0x39,
	0x16, 0x2e, 0x0c, 0xd8, 0x20, 0x8c, 0x7f, 0x14, 0x62, 0xcb, 0xd8, 0x71, 0x70, 0x27, 0x71, 0x48,
	0x9c, 0x78, 0x2b, 0xcd, 0x6e, 0xd5, 0x6e, 0x6a, 0xb3, 0xb5, 0x24, 0x5e, 0xa7, 0x5c, 0x15, 0x67,
	0x49, 0x93, 0xda, 0xad, 0xa9, 0xb9, 0x98, 0xc8, 0x8d, 0xec, 0x74, 0x05, 0x5a, 0x8c, 0x5a, 0x4d,
	0x8a, 0xcb, 0xb9, 0x9d, 0xc7, 0x98, 0xdb, 0xb9, 0x9c, 0x37, 0x99, 0xdb, 0x79, 0x84, 0xb9, 0x99,
	0x47, 0x98, 0x92, 0x5a, 0xfd, 0x07, 0xdd, 0xfc, 0x18, 0xee, 0xd0, 0x77, 0xbe, 0x73, 0x74, 0x8e,
	0x8e, 0xe8, 0x3e, 0x1f, 0x80, 0x6d, 0x8b, 0xf2, 0xe7, 0xd7, 0x8c, 0xda, 0x96, 0xeb, 0x9c, 0xf6,
	0x19, 0xe5, 0x14, 0x96, 0x2c, 0xca, 0xbf, 0x53, 0x90, 0x76, 0x02, 0x36, 0xdb, 0xae, 0x69, 0x12,
	0xc7, 0x31, 0x88, 0xd3, 0xa7, 0xb6, 0x43, 0x20, 0x02, 0x6b, 0x8e, 0x07, 0xa1, 0x4c, 0x2d, 0x53,
	0x2f, 0x18, 0xfe, 0x52, 0xfb, 0x25, 0x03, 0x8a, 0x2d, 0xfa, 0x95, 0xb0, 0xeb, 0x2e, 0xfd, 0x0a,
	0x4f, 0x41, 0xce, 0xb1, 0x38, 0x91, 0xa4, 0x92, 0x5e, 0x3d, 0x8d, 0x84, 0x3d, 0x6d, 0x5b, 0x9c,
	0x04, 0x4c, 0x43, 0xf2, 0xe0, 0x4b, 0x50, 0xb0, 0xec, 0x01, 0x61, 0x9c, 0x30, 0xb4, 0x52, 0xcb,
	0xd6, 0x4b, 0xfa, 0x61, 0xcc, 0xe7, 0x42, 0x19, 0x43, 0xbf, 0x80, 0x2f, 0x7c, 0xe9, 0xe7, 0x5e,
	0xdf, 0xea, 0x52, 0x8e, 0xb2, 0x09, 0xbe, 0xff, 0x55, 0xc6, 0x88, 0xaf, 0xcf, 0xd7, 0x7e, 0xcb,
	0x82, 0x72, 0x2c, 0x1f, 0x08, 0x41, 0xae, 0x47, 0x3b, 0x5e, 0xe6, 0x45, 0x43, 0x7e, 0x86, 0xc7,
	0x60, 0xe3, 0x0a, 0x73, 0x4e, 0xd8, 0xb0, 0xcd, 0xb1, 0xdd, 0xb9, 0x1a, 0xa2, 0x15, 0x59, 0xfc,
	0x08, 0x0a, 0x0f, 0x01, 0xb8, 0xc2, 0xe6, 0x17, 0xb7, 0x7f, 0x29, 0x22, 0x64, 0x25, 0x27, 0x82,
	0xc0, 0x87, 0xa0, 0xdc, 0x17, 0x1b, 0x9d, 0x33, 0xda, 0x7b, 0xcb, 0xac, 0x0e, 0xca, 0xd5, 0x32,
	0xf5, 0x8c, 0x11, 0x07, 0xe1, 0x01, 0x28, 0x4a, 0xe0, 0x1d, 0xc5, 0x1d, 0x94, 0x97, 0x8c, 0x10,
	0x08, 0xac, 0xcd, 0x2f, 0x5f, 0x5c, 0xb4, 0x1a, 0xb1, 0x0a, 0x00, 0xd6, 0x40, 0x29, 0x08, 0xd6,
	0x1a, 0xa0, 0x35, 0x69, 0x8f, 0x42, 0xf0, 0xef, 0x60, 0x97, 0x91, 0x2e, 0xe6, 0xd6, 0x80, 0xb4,
	0x49, 0xf7, 0xfa, 0x0d, 0xb5, 0x1d, 0xb7, 0xd7, 0xe7, 0x16, 0xb5, 0x51, 0xa1, 0x96, 0xa9, 0x97,
	0x8d, 0x34, 0x33, 0x7c, 0x0a, 0xb6, 0x7c, 0x53, 0xd3, 0xe5, 0xd4, 0xa6, 0xbd, 0x21, 0x2a, 0x4a,
	0x97, 0x31, 0x5c, 0x54, 0xda, 0x23, 0x5c, 0xa4, 0x6c, 0x62, 0x19, 0x1b, 0xc8, 0xe3, 0x8c, 0x83,
	0xa2, 0x16, 0x62, 0x13, 0x76, 0x33, 0x3c, 0xc3, 0x43, 0x54, 0xf2, 0x6a, 0x09, 0x00, 0x71, 0x9a,
	0xde, 0xe2, 0x1b, 0x82, 0x19, 0x5a, 0x97, 0xe6, 0x08, 0x22, 0x6a, 0xf5, 0x56, 0x1f, 0x29, 0xc7,
	0x5d, 0x54, 0xf6, 0x6a, 0x8d, 0x40, 0xda, 0xef, 0x19, 0xb0, 0x3d, 0x76, 0x73, 0x84, 0x9f, 0xea,
	0xdb, 0x65, 0xd8, 0xe8, 0x28, 0x24, 0x76, 0xee, 0x90, 0x81, 0x65, 0x92, 0x8f, 0xc3, 0x3e, 0x91,
	0xbd, 0x2e, 0x1b, 0x11, 0x24, 0x9e, 0x77, 0x76, 0x72, 0xde, 0xb9, 0x69, 0x79, 0xe7, 0xc7, 0xf2,
	0x86, 0x1a, 0x58, 0x37, 0x5d, 0xc6, 0x88, 0xed, 0xdd, 0x59, 0xd5, 0xe6, 0x18, 0x06, 0xb7, 0x40,
	0xd6, 0xa1, 0xa6, 0xec, 0x70, 0xd9, 0x10, 0x1f, 0x35, 0x0a, 0xb6, 0xc7, 0xae, 0xba, 0x08, 0xe5,
	0xdd, 0x0e, 0xd3, 0xdb, 0x2d, 0xe3, 0x85, 0x8a, 0x62, 0xb0, 0x02, 0xf2, 0x0e, 0xc7, 0xdc, 0xab,
	0xb4, 0x68, 0x78, 0x0b, 0x91, 0x26, 0x27, 0xbd, 0x3e, 0x61, 0x98, 0xbb, 0x8c, 0xa8, 0x32, 0xa3,
	0x90, 0xf6, 0x43, 0x05, 0x6c, 0xbd, 0xf1, 0x72, 0x3a, 0xc3, 0x1c, 0x5f, 0x8a, 0xde, 0xc2, 0x3a,
	0xd8, 0x54, 0x79, 0x36, 0xcd, 0xd6, 0x67, 0xec, 0x90, 0x17, 0x6a, 0xcf, 0x51, 0x78, 0x9c, 0xa9,
	0xcb, 0x04, 0xc6, 0x98, 0xfa, 0x38, 0xb3, 0xa1, 0xd2, 0x19, 0x85, 0x23, 0x27, 0xd7, 0x34, 0xdb,
	0x6e, 0x4f, 0x9d, 0x7e, 0x0c, 0x83, 0xaf, 0xc0, 0xba, 0xbc, 0x86, 0x67, 0x84, 0x63, 0xab, 0xeb,
	0xc8, 0x06, 0x94, 0xf4, 0xbd, 0xd8, 0x33, 0xe3, 0x32, 0x42, 0x30, 0x62, 0x74, 0xb8, 0x03, 0x56,
	0x89, 0x8d, 0xaf, 0xba, 0x44, 0xb6, 0xa5, 0x60, 0xa8, 0x15, 0x7c, 0x07, 0x8e, 0xbc, 0x1e, 0x1a,
	0x04, 0x9b, 0xe2, 0xcb, 0xf0, 0xbf, 0x26, 0xf3, 0x6b, 0xf5, 0xbe, 0x46, 0xa4, 0xa3, 0xda, 0x35,
	0x9d, 0x38, 0x31, 0x5a, 0x8b, 0xd1, 0x8e, 0x6b, 0x92, 0x8e, 0xfa, 0xc2, 0x4e, 0x27, 0x4e, 0x8a,
	0xa6, 0x07, 0xb9, 0x15, 0x27, 0x47, 0xd3, 0x67, 0xc9, 0x4d, 0x0f, 0x72, 0x03, 0x53, 0xa2, 0xcd,
	0x92, 0x5b, 0x23, 0xc8, 0xad, 0x34, 0x39, 0x5a, 0x63, 0x96, 0xdc, 0x1a, 0x41, 0x6e, 0xeb, 0x53,
	0xa2, 0x05, 0xb9, 0x9d, 0x83, 0xc3, 0x04, 0x52, 0xdb, 0xed, 0x05, 0x89, 0x95, 0x65, 0xa8, 0x29,
	0xac, 0xf4, 0x38, 0x41, 0x4a, 0x1b, 0x93, 0xe2, 0x04, 0xf9, 0xfc, 0x0b, 0x54, 0x03, 0x46, 0xf7,
	0xff, 0x4d, 0xf3, 0xd2, 0xb2, 0x5d, 0xa7, 0x79, 0xe5, 0xd0, 0xae, 0xcb, 0x09, 0xda, 0x94, 0x31,
	0x26, 0x30, 0xe0, 0xbf, 0xc1, 0x7e, 0xcc, 0x3a, 0x72, 0x3b, 0xb7, 0x64, 0x80, 0x49, 0x94, 0x94,
	0x08, 0x41, 0x19, 0xdb, 0xa9, 0x11, 0x82, 0x1a, 0x12, 0x23, 0x84, 0xb7, 0x10, 0xa6, 0x45, 0xd0,
	0x27, 0xe7, 0x10, 0xde, 0xbc, 0x3b, 0xa9, 0x11, 0x26, 0xe7, 0x10, 0xde, 0xb6, 0x4a, 0x5a, 0x84,
	0xc6, 0xe4, 0x1c, 0xc2, 0x1b, 0x76, 0x37, 0x35, 0x42, 0x90, 0xc3, 0x3f, 0xc1, 0x5e, 0xdc, 0xdc,
	0x8d, 0xb4, 0x72, 0x47, 0xfa, 0xa7, 0x13, 0xe0, 0x4b, 0x80, 0x62, 0xc6, 0xe8, 0x9d, 0xdc, 0x95,
	0xce, 0xa9, 0xf6, 0x24, 0xdf, 0x20, 0x71, 0x94, 0xec, 0x1b, 0x64, 0xfd, 0x57, 0x70, 0xf7, 0x9a,
	0x91, 0xef, 0x5d, 0x62, 0x9b, 0x43, 0x59, 0x50, 0x73, 0x40, 0x18, 0xbe, 0x21, 0x68, 0x4f, 0x3e,
	0x69, 0x93, 0x8d, 0x50, 0x07, 0x95, 0xd8, 0x9b, 0x5f, 0xbd, 0x35, 0x50, 0x55, 0xee, 0x96, 0x68,
	0x13, 0x3e, 0xde, 0x5b, 0xaa, 0xdf, 0xc7, 0x02, 0x68, 0xab, 0xb7, 0xc9, 0xbe, 0xdc, 0x28, 0xd1,
	0x96, 0xe2, 0xa3, 0xa3, 0x83, 0x54, 0x1f, 0x3d, 0xc5, 0xa7, 0x81, 0xee, 0xa5, 0xfa, 0x34, 0xe0,
	0x33, 0xb0, 0x1d, 0xc7, 0xc5, 0xbb, 0xe6, 0x50, 0x3a, 0x8c, 0x1b, 0x02, 0xf6, 0x39, 0x36, 0x39,
	0x65, 0xaa, 0x8c, 0xfb, 0x11, 0x76, 0xd4, 0x90, 0xc4, 0xd6, 0x51, 0x2d, 0x99, 0xad, 0x27, 0xb1,
	0x1b, 0xe8, 0x28, 0x99, 0xdd, 0x10, 0x83, 0x6c, 0x04, 0x14, 0x49, 0x6b, 0x92, 0x3a, 0x82, 0x06,
	0x67, 0xe2, 0x3f, 0x88, 0x3e, 0xa8, 0xa4, 0x1f, 0x44, 0xce, 0x64, 0xc4, 0x96, 0xe2, 0xa3, 0xa3,
	0x87, 0xa9, 0x3e, 0x7a, 0x8a, 0x4f, 0x03, 0x3d, 0x4a, 0xf5, 0x09, 0xcf, 0x3e, 0xc0, 0x45, 0x19,
	0xc7, 0x91, 0x8a, 0xa3, 0x06, 0x31, 0xb4, 0xfa, 0x60, 0xb7, 0xa5, 0xaa, 0x78, 0x2c, 0xc9, 0x63,
	0x78, 0x02, 0x57, 0x47, 0xf5, 0x44, 0xae, 0x9e, 0xc0, 0x6d, 0xa0, 0x27, 0x89, 0xdc, 0x46, 0x30,
	0xf6, 0x4b, 0x4c, 0x64, 0xfb, 0x34, 0x32, 0xf6, 0xfb, 0xa0, 0x18, 0x2a, 0xb9, 0xd5, 0x23, 0x0e,
	0xc7, 0xbd, 0x3e, 0x3a, 0xa9, 0x65, 0xea, 0x59, 0x23, 0x04, 0x84, 0xf0, 0x1a, 0x58, 0x8e, 0x25,
	0xc6, 0x8e, 0x67, 0x9e, 0xf0, 0x52, 0x4b, 0x31, 0x1c, 0x0d, 0x68, 0x97, 0xe3, 0x1b, 0x12, 0x0c,
	0x5c, 0xcf, 0xbd, 0xe1, 0x68, 0x04, 0x1e, 0x67, 0xea, 0xe8, 0x34, 0x89, 0xa9, 0x8f, 0x33, 0x1b,
	0xe8, 0x2f, 0x49, 0xcc, 0x86, 0xf6, 0x09, 0xac, 0x47, 0x67, 0x25, 0x31, 0x80, 0xf5, 0xb0, 0xed,
	0x5e, 0x63, 0x53, 0x8c, 0x88, 0x4c, 0x4d, 0xd7, 0x31, 0x4c, 0xcc, 0x9b, 0x42, 0x56, 0x75, 0xfd,
	0x79, 0x53, 0x2e, 0xc4, 0x5c, 0xe5, 0x10, 0x66, 0xe1, 0xae, 0x9c, 0xed, 0x8a, 0x86, 0x5a, 0x69,
	0x6d, 0xb0, 0xe3, 0x3d, 0x12, 0x82, 0x19, 0xd3, 0x10, 0x8f, 0x18, 0x87, 0xc3, 0x7f, 0x80, 0x02,
	0xe9, 0x92, 0x1e, 0xb1, 0xb9, 0x50, 0xa3, 0x42, 0xf8, 0xdd, 0x8b, 0x0d, 0x71, 0xa3, 0xb3, 0xa9,
	0x11, 0xd0, 0xb5, 0x9f, 0x33, 0x60, 0x2f, 0x8c, 0xea, 0x6b, 0x04, 0x3f, 0xf0, 0x01, 0x28, 0x76,
	0xf0, 0xf0, 0x3f, 0xf2, 0x19, 0x28, 0x23, 0xe7, 0x8d, 0x10, 0x10, 0x93, 0x77, 0x1f, 0x9b, 0x52,
	0xa6, 0xe6, 0x0d, 0xf1, 0x51, 0x8e, 0xca, 0x62, 0x92, 0x56, 0x1e, 0x59, 0x69, 0x89, 0x42, 0x42,
	0x13, 0x0c, 0x09, 0x66, 0x8a, 0x90, 0x93, 0x84, 0x08, 0x12, 0x6f, 0x7e, 0x7e, 0xa4, 0xf9, 0xda,
	0x2b, 0xb0, 0xa1, 0x6a, 0xb9, 0xa0, 0x6d, 0x39, 0x9c, 0x9f, 0x80, 0x5c, 0xdf, 0xb2, 0xfd, 0xb2,
	0x77, 0xe3, 0x5a, 0xd9, 0xe3, 0xb4, 0x2c, 0xdb, 0x90, 0x24, 0xed, 0xc7, 0x0c, 0x00, 0x21, 0x28,
	0x15, 0xa4, 0x65, 0xbf, 0x77, 0x7b, 0x57, 0xaa, 0x3f, 0x79, 0x23, 0x04, 0x60, 0x15, 0x14, 0xae,
	0x5d, 0xdb, 0x94, 0xa2, 0xcd, 0xeb, 0x4f, 0xb0, 0x16, 0xda, 0x98, 0x0b, 0x45, 0xe4, 0x35, 0x48,
	0x7e, 0x96, 0x67, 0x65, 0x31, 0xe2, 0x39, 0xe4, 0xa4, 0x21, 0x04, 0xa4, 0x4a, 0x21, 0x5c, 0x56,
	0x54, 0x30, 0xc4, 0x47, 0xed, 0x3d, 0xa8, 0x9c, 0x5b, 0x76, 0xe7, 0xf5, 0xf0, 0x4c, 0xa4, 0x83,
	0x19, 0x96, 0x0f, 0x7f, 0x47, 0xc4, 0x71, 0x38, 0x66, 0xa2, 0x5b, 0x9e, 0x26, 0xcb, 0x1a, 0x21,
	0x20, 0xae, 0x3f, 0xb1, 0x3b, 0x67, 0xbe, 0x48, 0xc9, 0x1a, 0xfe, 0x52, 0x33, 0xc0, 0xde, 0x5b,
	0x12, 0xe9, 0xb1, 0xfa, 0xa5, 0xa2, 0xc9, 0x18, 0x1e, 0xc2, 0xbf, 0x81, 0x5c, 0x07, 0x73, 0xac,
	0x8e, 0xe9, 0x28, 0x76, 0x4c, 0x49, 0x5e, 0x86, 0xa4, 0x6b, 0x7f, 0x40, 0x50, 0x49, 0x32, 0xc3,
	0x0d, 0xb0, 0x62, 0x75, 0x64, 0x76, 0x39, 0x63, 0xc5, 0xea, 0x24, 0x89, 0x9d, 0x95, 0x99, 0xc5,
	0x4e, 0x76, 0x66, 0xb1, 0x93, 0x9b, 0x4d, 0xec, 0xe4, 0x13, 0xc4, 0xce, 0x4c, 0xaa, 0x64, 0x75,
	0xa9, 0xaa, 0x64, 0x6d, 0xa9, 0xaa, 0xa4, 0xb0, 0x54, 0x55, 0x52, 0x5c, 0xaa, 0x2a, 0x01, 0x4b,
	0x55, 0x25, 0xa5, 0xe5, 0xa9, 0x92, 0xf5, 0x25, 0xa9, 0x92, 0xf2, 0x12, 0x54, 0xc9, 0xc6, 0xa2,
	0xaa, 0x64, 0x73, 0x61, 0x55, 0xb2, 0xb5, 0xb0, 0x2a, 0xd9, 0x5e, 0x58, 0x95, 0xc0, 0x85, 0x55,
	0xc9, 0x9d, 0x85, 0x55, 0x49, 0x65, 0x41, 0x55, 0x72, 0x77, 0x11, 0x55, 0xb2, 0xb3, 0x80, 0x2a,
	0xd9, 0xbd, 0xad, 0x2a, 0x41, 0x53, 0x54, 0x49, 0xa2, 0xc2, 0xd8, 0xbb, 0x85, 0xc2, 0xa8, 0xde,
	0x42, 0x61, 0xec, 0xcf, 0xab, 0x30, 0x0e, 0xe6, 0x52, 0x18, 0xf7, 0xe6, 0x52, 0x18, 0x87, 0x73,
	0x29, 0x8c, 0xfb, 0xb3, 0x2b, 0x8c, 0xda, 0x5c, 0x0a, 0xe3, 0xe8, 0x16, 0x0a, 0x43, 0xbb, 0x85,
	0xc2, 0x78, 0x30, 0xaf, 0xc2, 0x78, 0x38, 0x8f, 0xc2, 0x78, 0x34, 0x87, 0xc2, 0x38, 0x9e, 0x43,
	0x61, 0x3c, 0x9e, 0x55, 0x61, 0xd4, 0xa7, 0x2a, 0x8c, 0x27, 0xa3, 0x0a, 0x23, 0x41, 0x47, 0x3c,
	0x9d, 0x59, 0x47, 0x9c, 0xcc, 0xac, 0x23, 0x9e, 0x25, 0xea, 0x08, 0xfd, 0xd7, 0x2c, 0x58, 0x3b,
	0xf7, 0x26, 0x33, 0x68, 0x80, 0xea, 0x85, 0xed, 0x10, 0xc6, 0x23, 0x03, 0x7c, 0xf8, 0x8b, 0xf6,
	0x4e, 0x6c, 0x8a, 0x0b, 0xf0, 0xea, 0x41, 0xfc, 0x4f, 0xa6, 0x91, 0x3f, 0xae, 0xbe, 0x05, 0x3b,
	0x63, 0x31, 0xbd, 0x1f, 0xac, 0x1f, 0x24, 0x68, 0x86, 0x51, 0xa9, 0x31, 0x25, 0x38, 0x06, 0x7b,
	0x63, 0xc1, 0x7d, 0x4d, 0x01, 0x8f, 0x53, 0xe2, 0x8f, 0x88, 0x8e, 0x29, 0x5b, 0x7c, 0x00, 0x95,
	0xd8, 0x16, 0xbe, 0x10, 0xd8, 0x4f, 0x52, 0x3c, 0xca, 0x38, 0x25, 0xe4, 0x27, 0x70, 0x47, 0x4c,
	0xe2, 0x41, 0xad, 0xde, 0x48, 0x0e, 0xe3, 0x53, 0x72, 0xd2, 0xac, 0x5e, 0x3d, 0x9e, 0x3a, 0x48,
	0xcb, 0xf1, 0xfb, 0xf5, 0x0b, 0xb0, 0x63, 0xd2, 0xde, 0x29, 0x1e, 0x90, 0x1b, 0x4c, 0x85, 0xcf,
	0xa9, 0xf2, 0x79, 0xbd, 0x79, 0x41, 0xb9, 0x6a, 0x77, 0x8b, 0x51, 0x4e, 0x5b, 0x99, 0x9f, 0x56,
	0xb2, 0xc6, 0xc7, 0xb7, 0x57, 0xab, 0xf2, 0x7f, 0xc8, 0xc6, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x14, 0x6e, 0x30, 0x7a, 0x9c, 0x1c, 0x00, 0x00,
}
